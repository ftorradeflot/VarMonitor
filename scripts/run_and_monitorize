#!/usr/bin/env python
# Handle renaming of ConfigParser from python 2 to 3
try:
    import ConfigParser
except ModuleNotFoundError:
    import configparser as ConfigParser

import argparse
import shlex
import psutil
import os
import sys
import uuid
import pkg_resources

from var_monitor import ProcessTreeMonitor

CHECK_LAPSE = 0 # time between each usage check in seconds
REPORT_LAPSE = 1 # time between each usage print in seconds
HS06_REF = 12.2 # reference to compute the HS06
VAR_LIST = ['max_vms', 'max_rss', 'total_io_read', 'total_io_write',
            'total_cpu_time', 'total_HS06']


def parse_cmd_args(args_list):
    parser = argparse.ArgumentParser()
    parser.add_argument('--logdir', required=False, default='.')
    parser.add_argument('--workdir', required=False, default='.')
    args = parser.parse_known_args(args_list)
    return args
    

def parse_main_args():
    parser = argparse.ArgumentParser(description="CLI utility for running and monitoring processes.")
    parser.add_argument("--command", "-c", required=False, help="Command to be run and monitorized")
    parser.add_argument("--pid", "-p", required=False, help="Id of the process to monitorize",
                        type=int)
    parser.add_argument("--conf", required=False, help="Configuration file")

    args = parser.parse_args()
    return args


ARGS_FUNC_DICT = {
    'var_list': lambda x: x.split(','),
    'check_lapse': lambda x: float(x),
    'report_lapse': lambda x: float(x)}

def modify_args(elem):
    k, v = elem
    new_v = ARGS_FUNC_DICT[k](v)
    return k, new_v


def main():
    args = parse_main_args()
    
    # Load configuration
    if args.conf:
        conf_file = args.conf
    else:
        conf_file = pkg_resources.resource_filename(pkg_resources.Requirement('run_and_monitorize'), 'run_and_monitorize/run_and_monitorize.cfg')
    config = ConfigParser.ConfigParser()
    config.read(conf_file)
    
    # Configure logging
    # Get logging directory
    if config.has_option('logging', 'logdir'):
        logdir =  config.get('logging', 'logdir')
    else:
        logdir = '.'
    
    # get log file    
    if config.has_option('logging', 'logfile'):
        logfile = config.get('logging', 'logfile')
    else:
        logfile = 'usage_{}.csv'.format(uuid.uuid1().hex)    
    
    
    # Get the process to be monitorized
    if args.pid and args.command:
        raise Exception('Both --pid and --command provided. Only one of those parameters accepted')    
    
    elif not args.pid and not args.command:
        raise Exception('One of --pid or --command required')
    
    elif args.pid:
        proc = psutil.Process(args.pid)
        
    elif args.command:
        # Get the command to be run and monitorized
        command_list = shlex.split(args.command) 
        
        # Initialize the process
        proc = psutil.Popen(command_list)

        #Handle the additional case when the logdir is defined inside the command
        if config.has_option('logging', 'logdir_implicit') and \
        config.getboolean('logging', 'logdir_implicit'):
            cmd_args, unknown = parse_cmd_args(command_list)
            logdir = os.path.join(cmd_args.workdir, cmd_args.logdir)

    # Compute whole file name
    whole_logfile = os.path.join(logdir, logfile)
    
    # Initialize and start the Monitor
    monit_kwargs = dict(map(modify_args, config.items('root')))    
    if 'total_HS06' in monit_kwargs['var_list']:
        monit_kwargs['HS06_factor_func'] = config.get('HS06', 'HS06_factor_func')
    monit_kwargs['log_file'] = whole_logfile
    monitor = ProcessTreeMonitor(proc, **monit_kwargs)
    monitor.start()
    
    # When the process has been created by the monitor propagate the exit status
    if hasattr(proc, 'returncode'):
        sys.exit(proc.returncode)
    
    
if __name__ == '__main__':
    main()  

